/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import Animals.Cats;
import Animals.Dogs;
import Animals.Many;
import Pseudo.PseudoQueue;
import Queue.*;
import Stacks.Stack;
import Queue.AnimalShelter;
import Stacks.Validate;
import org.checkerframework.checker.units.qual.A;

public class Library {
    public static void main(String[] args) throws Exception {

        //queueDemo();
       //stackDemo();


        //pseudoQueueDemo();
//animalShelterDemo();
        //validateDemo();
    duckDuckGoose();
    }
    public static void duckDuckGoose() throws  Exception{
        DuckDuckGoose duckDuckGoose=new DuckDuckGoose();

        System.out.println(duckDuckGoose.duckDuckGoose(new String []{"A","B","C","D","E"},2));
    }
public static void validateDemo() throws Exception{
    Validate validate=new Validate();
    System.out.println(validate.validateBrackets("([}){}{)"));
}
    public static void queueDemo() throws Exception {
        Queue queue = new Queue();

        queue.enqueue("F");
        queue.enqueue("A");
        queue.enqueue("R");
        queue.enqueue("A");
        queue.enqueue("H");

        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
        System.out.println("The front of the Queue is => " + queue.peek());
        System.out.println(queue.dequeue());
        System.out.println(queue.dequeue());
    }

    public static void stackDemo() throws Exception {
        Stack stack = new Stack();

        stack.push("A");
        stack.push("H");
        stack.push("M");
        stack.push("A");
        stack.push("D");

        System.out.println("The top of the stack is => " + stack.peek());

        System.out.println(stack.pop());

        System.out.println("The top of the stack is => " + stack.peek());

        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
    }

    public static void pseudoQueueDemo() throws Exception {
        PseudoQueue pseudoQueue=new PseudoQueue();
        pseudoQueue.enQueue("F");
        pseudoQueue.enQueue(2);
        pseudoQueue.enQueue(3);

        System.out.println(pseudoQueue.deQueue());
        System.out.println(pseudoQueue.deQueue());
        System.out.println(pseudoQueue.deQueue());
    }
    public static void animalShelterDemo()throws Exception{
        AnimalShelter animalShelter=new AnimalShelter();
        Cats cat1=new Cats("shemsh");
        Cats cat2=new Cats("kitkit");


        Dogs dog1=new Dogs("Rocky");
        Dogs dog2=new Dogs("MILO");

        Many duck1=new Many("daffy");
        Many duck2=new Many("Quacky");

        animalShelter.enQueue(cat1);
        animalShelter.enQueue(cat2);
        animalShelter.enQueue(dog1);
        animalShelter.enQueue(dog2);
animalShelter.enQueue(duck1);
animalShelter.enQueue(duck2);
        System.out.println(animalShelter.deQueue("dog"));
        System.out.println(animalShelter.deQueue("cat"));
                System.out.println("*******************************************");
        System.out.println(animalShelter.deQueue("rubberDuck"));
        System.out.println("*******************************************");
        System.out.println(animalShelter.deQueue("cat"));
        System.out.println(animalShelter.deQueue("cat"));
        System.out.println("*******************************************");
        System.out.println(animalShelter.deQueue("cat"));
        System.out.println("*******************************************");
        System.out.println(animalShelter.deQueue("Fox"));
        System.out.println("*******************************************");
        System.out.println(animalShelter.deQueue("dog"));
        System.out.println(animalShelter.deQueue("dog"));
        System.out.println("*******************************************");
        System.out.println(animalShelter.deQueue("dog"));
        System.out.println("*******************************************");
        System.out.println(animalShelter.deQueue("horse"));

    }
}